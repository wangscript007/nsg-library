CONFIG -= qt
CONFIG += thread c++11
DEFINES += QTMAKE
SOURCE_ROOT_PWD = $$PWD
TARGET_PWD = $$shadowed($$PWD)

QMAKE_CXXFLAGS_DEBUG += -D_DEBUG
QMAKE_CXXFLAGS_RELEASE += -DNDEBUG

ios {
    DEFINES += IS_TARGET_IOS IOS IS_TARGET_APPLE IS_TARGET_MOBILE GLES2
    QMAKE_CXXFLAGS += -Wno-unused-parameter -x objective-c++ -stdlib=libc++
    QMAKE_LFLAGS += -F/System/Library/Frameworks/
    LIBS += -framework AudioToolbox -framework CoreAudio -framework CoreGraphics -framework Foundation -framework OpenGLES -framework QuartzCore -framework UIKit
}

android {
    DEFINES += IS_TARGET_ANDROID ANDROID GLES2 IS_TARGET_MOBILE
    QMAKE_CXXFLAGS += -Wno-unused-parameter -std=gnu++11 
    LIBS += -ldl -lGLESv2 -llog -landroid -lEGL
}

osx:!android:!ios {
    DEFINES += IS_TARGET_OSX
    DEFINES += IS_TARGET_APPLE
    QMAKE_CXXFLAGS += -Wno-unused-parameter -x objective-c++ -stdlib=libc++
    QMAKE_LFLAGS += -F/System/Library/Frameworks/
    LIBS += -framework AudioUnit -framework Carbon -framework Cocoa -framework CoreAudio -framework ForceFeedback -framework IOKit -framework OpenGL -framework CoreServices
    BLENDER_EXECUTABLE = $$(BLENDER_BIN)/blender.app/Contents/MacOS/blender

}

linux:!android:!ios {
    DEFINES += IS_TARGET_LINUX
    SYSROOTPATH = $$(SDKTARGETSYSROOT)
    message($$SYSROOTPATH)
    !isEmpty(SYSROOTPATH) {
        message("SDKTARGETSYSROOT found!!!")
        INCLUDEPATH += $$(SDKTARGETSYSROOT)/usr/include/c++/6.2.0/i586-poky-linux
        QMAKE_CXXFLAGS += --sysroot=$$(SDKTARGETSYSROOT)
        QMAKE_LFLAGS += --sysroot=$$(SDKTARGETSYSROOT)
        COMPILER_PATH = $$(OE_QMAKE_CXX)
        QMAKE_CXX = $$basename(COMPILER_PATH)-g++
        QMAKE_LINK  = $$QMAKE_CXX
        target.path = /home/root
        INSTALLS += target
    }
    QMAKE_CXXFLAGS += -Wno-unused-parameter 
    QMAKE_LFLAGS += -Wl,--no-as-needed
    CONFIG += x11 opengl
    BLENDER_EXECUTABLE = $$(BLENDER_BIN)/blender
}

win32:!android:!ios {
    DEFINES += IS_TARGET_WINDOWS NOMINMAX
    BLENDER_EXECUTABLE = $$(BLENDER_BIN)/blender.exe
    LIBS += -lwsock32 -lws2_32 -lopengl32 -lgdi32
    CONFIG += console
    QMAKE_CFLAGS = $$replace(QMAKE_CFLAGS, MD, MT)
    QMAKE_CFLAGS_DEBUG = $$replace(QMAKE_CFLAGS_DEBUG, MD, MT)
    QMAKE_CFLAGS_RELEASE = $$replace(QMAKE_CFLAGS_RELEASE, MD, MT)
    QMAKE_CXXFLAGS = $$replace(QMAKE_CXXFLAGS, MD, MT)
    QMAKE_CXXFLAGS_DEBUG = $$replace(QMAKE_CXXFLAGS_DEBUG, MD, MT)
    QMAKE_CXXFLAGS_RELEASE = $$replace(QMAKE_CXXFLAGS_RELEASE, MD, MT)
}

defineTest(createDir) {
    dir = $$1
    !exists($$dir) {
        mkpath($$dir)
    }
}

defineTest(copyData) {
    PROJECT_PWD = $$PWD
    dir = $$PROJECT_PWD/data
    createDir($$dir)
    osx {
        QMAKE_POST_LINK += cp -R $$dir $$OUT_PWD/$${TARGET}.app/Contents/Resources
    }
    win32 {
        QMAKE_POST_LINK += xcopy /I /Y $$system_path($$dir) $$system_path($$OUT_PWD/data)
    }
    linux {
        QMAKE_POST_LINK += cp -R $$dir $$OUT_PWD
    }
    export(QMAKE_POST_LINK)
}

defineTest(exportBlend) {
    exists($$BLENDER_EXECUTABLE) {
        PROJECT_PWD = $$PWD
        exportScript = $$SOURCE_ROOT_PWD/tools/blenderexport/Export.py
        file = $$1
        fileFullPath = $$PROJECT_PWD/$$file
        name = $$file
        target = $$PROJECT_PWD/$$2/$$basename(fileFullPath).xml
        outputDir = $$PROJECT_PWD/$$2
        createDir($$outputDir)
        eval($${name}.target = $$target)
        export($${name}.target)
        eval($${name}.commands = $$BLENDER_EXECUTABLE $$PROJECT_PWD/$${file}.blend --background --python $$exportScript -- $$outputDir)
        export($${name}.commands)
        QMAKE_EXTRA_TARGETS += $${name}
        POST_TARGETDEPS += $$target
        export(QMAKE_EXTRA_TARGETS)
        export(POST_TARGETDEPS)
    }
}

defineTest(convertTool) {
    !android:!ios {
        PROJECT_PWD = $$PWD
        file = $$PROJECT_PWD/$$1
        outputDir = $$PROJECT_PWD/$$2
        createDir($$outputDir)
        args = $$3
        convertExecutable = $$TARGET_PWD/tools/converter/converter
        name = $$file
        target = $$outputDir/$$basename(name)
        target = $$replace(target, ".ttf", ".xml")
        eval($${name}.target = $$target)
        export($${name}.target)
        osx {
            eval($${name}.commands = open $${convertExecutable}.app --args -i $$file -o $$outputDir $$args)
        } else {
            eval($${name}.commands = $$convertExecutable -i $$file -o $$outputDir $$args)
        }
        export($${name}.commands)
        QMAKE_EXTRA_TARGETS += $${name}
        POST_TARGETDEPS += $$target
        export(QMAKE_EXTRA_TARGETS)
        export(POST_TARGETDEPS)
    }
}


defineTest(setupSample) {
    PROJECT_PWD = $$PWD
    TEMPLATE = app
    export(TEMPLATE)
    CONFIG += x11
    export(CONFIG)
    HEADERS += $$files($$PROJECT_PWD/*.h, true)
    export(HEADERS)
    SOURCES += $$files($$PROJECT_PWD/*.cpp, true)
    export(SOURCES)
    INCLUDEPATH += $$files($$SOURCE_ROOT_PWD/NSG/*, false)
    INCLUDEPATH += $$SOURCE_ROOT_PWD/externals/pugixml/src
    INCLUDEPATH += $$SOURCE_ROOT_PWD/externals/imgui
    INCLUDEPATH += $$SOURCE_ROOT_PWD/externals/bullet/src
    export(INCLUDEPATH)
    win32 {
        debug:LIBS += -L$$TARGET_PWD/NSG/debug -lNSG
        debug:LIBS += -L$$TARGET_PWD/dependencies/jpeg/debug -ljpeg
        debug:LIBS += -L$$TARGET_PWD/dependencies/libb64/debug -llibb64
        debug:LIBS += -L$$TARGET_PWD/dependencies/LZ4/debug -lLZ4
        debug:LIBS += -L$$TARGET_PWD/externals/debug -lexternals
        release:LIBS += -L$$TARGET_PWD/NSG/release -lNSG
        release:LIBS += -L$$TARGET_PWD/dependencies/jpeg/release -ljpeg
        release:LIBS += -L$$TARGET_PWD/dependencies/libb64/release -llibb64
        release:LIBS += -L$$TARGET_PWD/dependencies/LZ4/release -lLZ4
        release:LIBS += -L$$TARGET_PWD/externals/release -lexternals
    } else {
        LIBS += -L../../NSG -lNSG
        LIBS += -L../../dependencies/jpeg -ljpeg
        LIBS += -L../../dependencies/libb64 -llibb64
        LIBS += -L../../dependencies/LZ4 -lLZ4
        LIBS += -L../../externals -lexternals
    }
    export(LIBS)
    OTHER_FILES += $$PROJECT_PWD/data/*
    OTHER_FILES += $$PROJECT_PWD/art/*
    export(OTHER_FILES)
    copyData()
}

defineTest(setupTest) {
    PROJECT_PWD = $$PWD
    TEMPLATE = app
    export(TEMPLATE)
    CONFIG += testcase x11
    export(CONFIG)
    HEADERS += $$files($$PROJECT_PWD/*.h, true)
    export(HEADERS)
    SOURCES += $$files($$PROJECT_PWD/*.cpp, true)
    export(SOURCES)
    INCLUDEPATH += $$files($$SOURCE_ROOT_PWD/NSG/*, false)
    INCLUDEPATH += $$SOURCE_ROOT_PWD/externals/pugixml/src
    INCLUDEPATH += $$SOURCE_ROOT_PWD/externals/imgui
    INCLUDEPATH += $$SOURCE_ROOT_PWD/externals/bullet/src
    export(INCLUDEPATH)
    win32 {
        debug:LIBS += -L$$TARGET_PWD/NSG/debug -lNSG
        debug:LIBS += -L$$TARGET_PWD/dependencies/jpeg/debug -ljpeg
        debug:LIBS += -L$$TARGET_PWD/dependencies/libb64/debug -llibb64
        debug:LIBS += -L$$TARGET_PWD/dependencies/LZ4/debug -lLZ4
        debug:LIBS += -L$$TARGET_PWD/externals/debug -lexternals
        release:LIBS += -L$$TARGET_PWD/NSG/release -lNSG
        release:LIBS += -L$$TARGET_PWD/dependencies/jpeg/release -ljpeg
        release:LIBS += -L$$TARGET_PWD/dependencies/libb64/release -llibb64
        release:LIBS += -L$$TARGET_PWD/dependencies/LZ4/release -lLZ4
        release:LIBS += -L$$TARGET_PWD/externals/release -lexternals
    } else {
        LIBS += -L$$TARGET_PWD/NSG -lNSG
        LIBS += -L$$TARGET_PWD/dependencies/jpeg -ljpeg
        LIBS += -L$$TARGET_PWD/dependencies/libb64 -llibb64
        LIBS += -L$$TARGET_PWD/dependencies/LZ4 -lLZ4
        LIBS += -L$$TARGET_PWD/externals -lexternals
    }
    export(LIBS)
    OTHER_FILES += $$PROJECT_PWD/data/*
    OTHER_FILES += $$PROJECT_PWD/art/*
    export(OTHER_FILES)
    copyData()
}

defineTest(setupTool) {
    !android:!ios {
        PROJECT_PWD = $$PWD
        TEMPLATE = app
        export(TEMPLATE)
        CONFIG += x11
        export(CONFIG)
        HEADERS += $$files($$PROJECT_PWD/*.h, true)
        export(HEADERS)
        SOURCES += $$files($$PROJECT_PWD/*.cpp, true)
        export(SOURCES)
        INCLUDEPATH += $$PROJECT_PWD/../common
        INCLUDEPATH += $$files($$SOURCE_ROOT_PWD/NSG/*, false)
        INCLUDEPATH += $$SOURCE_ROOT_PWD/externals/pugixml/src
        INCLUDEPATH += $$SOURCE_ROOT_PWD/externals/imgui
        INCLUDEPATH += $$SOURCE_ROOT_PWD/externals/bullet/src
        INCLUDEPATH += $$SOURCE_ROOT_PWD/dependencies/tclap/include
        export(INCLUDEPATH)
        win32 {
            debug:LIBS += -L$$TARGET_PWD/tools/common/debug -lcommon
            debug:LIBS += -L$$TARGET_PWD/NSG/debug -lNSG
            debug:LIBS += -L$$TARGET_PWD/dependencies/jpeg/debug -ljpeg
            debug:LIBS += -L$$TARGET_PWD/dependencies/libb64/debug -llibb64
            debug:LIBS += -L$$TARGET_PWD/dependencies/LZ4/debug -lLZ4
            debug:LIBS += -L$$TARGET_PWD/externals/debug -lexternals
            release:LIBS += -L$$TARGET_PWD/tools/common/release -lcommon
            release:LIBS += -L$$TARGET_PWD/NSG/release -lNSG
            release:LIBS += -L$$TARGET_PWD/dependencies/jpeg/release -ljpeg
            release:LIBS += -L$$TARGET_PWD/dependencies/libb64/release -llibb64
            release:LIBS += -L$$TARGET_PWD/dependencies/LZ4/release -lLZ4
            release:LIBS += -L$$TARGET_PWD/externals/release -lexternals
        } else {
            LIBS += -L$$TARGET_PWD/tools/common -lcommon
            LIBS += -L$$TARGET_PWD/NSG -lNSG
            LIBS += -L$$TARGET_PWD/dependencies/jpeg -ljpeg
            LIBS += -L$$TARGET_PWD/dependencies/libb64 -llibb64
            LIBS += -L$$TARGET_PWD/dependencies/LZ4 -lLZ4
            LIBS += -L$$TARGET_PWD/externals -lexternals
        }
        export(LIBS)
    }
}

defineTest(generateShaderHeaderFile) {
    input_file = $$1
    input_template_file = $$2
    output_file = $$3
    shaderLines = $$cat($$input_file, lines)
    for(shaderLine, shaderLines) {
        string_file += \"$$shaderLine\\n\"\\
    }
    newFile = ""
    template_lines = $$cat($$input_template_file, lines)
    for(line, template_lines) {
        line = $$replace(line, "_GLSL = ", "_GLSL = \$")
        hasGLSL = $$find(line, "_GLSL = ")
        !isEmpty(hasGLSL) {
            shader_string_file = " "
            eval(line = $$line)
            line = $$replace(line, " ;", "")
            newFile += "$$line \\" $$string_file
            newFile += ";"
        } else {
            newFile += $$line
        }
    }
    write_file($$output_file, newFile)
    export(CONFIG)
    return(true)
}
