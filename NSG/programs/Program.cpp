/*
-------------------------------------------------------------------------------
This file is part of nsg-library.
http://nsg-library.googlecode.com/

Copyright (c) 2014-2015 NÃ©stor Silveira Gorski

-------------------------------------------------------------------------------
This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.
2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.
3. This notice may not be removed or altered from any source distribution.
-------------------------------------------------------------------------------
*/

#include "Program.h"
#include "VertexShader.h"
#include "FragmentShader.h"
#include "Texture.h"
#include "Check.h"
#include "Context.h"
#include "ExtraUniforms.h"
#include "Light.h"
#include "Camera.h"
#include "Mesh.h"
#include "Scene.h"
#include "ResourceMemory.h"
#include "Material.h"
#include "Graphics.h"
#include "Constants.h"
#include "pugixml.hpp"
#include "autogenerated/Common_glsl.inl"
#include <stdlib.h>
#include <stdio.h>
#if !defined(__APPLE__)
#include <malloc.h>
#endif
#include <assert.h>
#include <cstring>
#include <string>
#include <algorithm>

namespace NSG
{
    Program::Program(const std::string& name, Flags flags)
        : flags_(flags),
          id_(0),
          pExtraUniforms_(nullptr),
          att_texcoordLoc_(-1),
          att_positionLoc_(-1),
          att_normalLoc_(-1),
          att_colorLoc_(-1),
          att_modelMatrixRow0Loc_(-1),
          att_normalMatrixCol0Loc_(-1),
          modelLoc_(-1),
          normalMatrixLoc_(-1),
          viewLoc_(-1),
          viewProjectionLoc_(-1),
          sceneColorAmbientLoc_(-1),
          eyeWorldPosLoc_(-1),
          texture0Loc_(-1),
          texture1Loc_(-1),
          numPointLightsLoc_(-1),
          hasLights_(false),
          nPointLights_(0),
          activeCamera_(nullptr),
          neverUsed_(true),
          activeMaterial_(nullptr),
          activeNode_(nullptr),
          activeScene_(nullptr),
          sceneColor_(-1),
          name_(name)
    {
        memset(&materialLoc_, -1, sizeof(materialLoc_));
        memset(&pointLighsLoc_[0], -1, sizeof(pointLighsLoc_));
        memset(&directionalLightLoc_, -1, sizeof(directionalLightLoc_));
        memset(&activePointLights_[0], 0, sizeof(activePointLights_));
    }

    void Program::SetVertexShader(PResource resource)
    {
        vertexShader_ = resource;
    }

    void Program::SetFragmentShader(PResource resource)
    {
        fragmentShader_ = resource;
    }

    bool Program::IsValid()
    {
        return (!vertexShader_ || vertexShader_->IsLoaded()) && (!fragmentShader_ || fragmentShader_->IsLoaded());
    }

    void Program::AllocateResources()
    {
        std::string preDefines;

#ifdef GL_ES_VERSION_2_0
        preDefines = "#version 100\n#define GLES2\n";
#else
        preDefines = "#version 120\n";
#endif
        if (Graphics::this_->HasInstancedArrays())
        {
            preDefines += "#define INSTANCED\n";
        }

        {
            std::stringstream ss;
            ss << "#define MAX_POINT_LIGHTS " << MAX_POINT_LIGHTS << "\n";
            preDefines += ss.str();
        }

        if (Flag::DIFFUSE & flags_)
            preDefines += "#define DIFFUSE\n";

        if (Flag::SPECULAR & flags_)
            preDefines += "#define SPECULAR\n";

        if (Flag::BLEND & flags_)
            preDefines += "#define BLEND\n";

        if (Flag::BLUR & flags_)
            preDefines += "#define BLUR\n";

        if (Flag::TEXT & flags_)
            preDefines += "#define TEXT\n";

        if (Flag::SHOW_TEXTURE & flags_)
            preDefines += "#define SHOW_TEXTURE\n";

        if (Flag::STENCIL & flags_)
            preDefines += "#define STENCIL\n";

        if (vertexShader_)
            preDefines += "#define HAS_USER_VERTEX_SHADER\n";

        if (fragmentShader_)
            preDefines += "#define HAS_USER_FRAGMENT_SHADER\n";


        std::string buffer = preDefines + "#define COMPILEVS\n";
        buffer += COMMON_GLSL;
        if (vertexShader_)
        {
            size_t bufferSize = buffer.size();
            buffer.resize(bufferSize + vertexShader_->GetBytes());
            memcpy(&buffer[0] + bufferSize, vertexShader_->GetData(), vertexShader_->GetBytes());
        }

        pVShader_ = PVertexShader(new VertexShader(buffer.c_str()));

        buffer = preDefines  + "#define COMPILEFS\n";
        buffer += COMMON_GLSL;
        if (fragmentShader_)
        {
            size_t bufferSize = buffer.size();
            buffer.resize(bufferSize + fragmentShader_->GetBytes());
            memcpy(&buffer[0] + bufferSize, fragmentShader_->GetData(), fragmentShader_->GetBytes());
        }

        pFShader_ = PFragmentShader(new FragmentShader(buffer.c_str()));

        CHECK_GL_STATUS(__FILE__, __LINE__);

        if (Initialize())
        {
            CHECK_GL_STATUS(__FILE__, __LINE__);

            if (pExtraUniforms_)
                pExtraUniforms_->SetLocations();

            att_positionLoc_ = GetAttributeLocation("a_position");
            att_normalLoc_ = GetAttributeLocation("a_normal");
            att_texcoordLoc_ = GetAttributeLocation("a_texcoord");
            att_colorLoc_ = GetAttributeLocation("a_color");
            att_modelMatrixRow0Loc_ = GetAttributeLocation("a_mMatrixRow0");
            att_normalMatrixCol0Loc_ = GetAttributeLocation("a_normalMatrixCol0");


            modelLoc_ = GetUniformLocation("u_model");
            normalMatrixLoc_ = GetUniformLocation("u_normalMatrix");
            viewLoc_ = GetUniformLocation("u_view");
            viewProjectionLoc_ = GetUniformLocation("u_viewProjection");
            sceneColorAmbientLoc_ = GetUniformLocation("u_sceneAmbientColor");
            eyeWorldPosLoc_ = GetUniformLocation("u_eyeWorldPos");
            texture0Loc_ = GetUniformLocation("u_texture0");
            texture1Loc_ = GetUniformLocation("u_texture1");
            materialLoc_.color_ = GetUniformLocation("u_material.color");
            materialLoc_.ambient_ = GetUniformLocation("u_material.ambient");
            materialLoc_.diffuse_ = GetUniformLocation("u_material.diffuse");
            materialLoc_.specular_ = GetUniformLocation("u_material.specular");
            materialLoc_.shininess_ = GetUniformLocation("u_material.shininess");

            hasLights_ = false;

            Scene* scene = Context::this_->scene_;
            if (scene)
            {
                const Light* dirLight = scene->GetFirstDirectionalLight();

                if (dirLight)
                {
                    directionalLightLoc_.base_.diffuse_ = GetUniformLocation("u_directionalLight.base.diffuse");
                    directionalLightLoc_.base_.specular_ = GetUniformLocation("u_directionalLight.base.specular");
                    directionalLightLoc_.direction_ = GetUniformLocation("u_directionalLight.direction");
                }

                numPointLightsLoc_ = GetUniformLocation("u_numPointLights");

                int idx = 0;
                const Scene::Lights& pointLigths = scene->GetPointLights(MAX_POINT_LIGHTS);
                for (auto& pointLight : pointLigths)
                {
                    std::stringstream lightIndex;
                    lightIndex << "u_pointLights[" << idx << "]";

                    pointLighsLoc_[idx].base_.diffuse_ = GetUniformLocation(lightIndex.str() + ".base.diffuse");
                    pointLighsLoc_[idx].base_.specular_ = GetUniformLocation(lightIndex.str() + ".base.specular");
                    pointLighsLoc_[idx].position_ = GetUniformLocation(lightIndex.str() + ".position");
                    pointLighsLoc_[idx].atten_.constant_ = GetUniformLocation(lightIndex.str() + ".atten.constant");
                    pointLighsLoc_[idx].atten_.linear_ = GetUniformLocation(lightIndex.str() + ".atten.linear");
                    pointLighsLoc_[idx].atten_.quadratic_ = GetUniformLocation(lightIndex.str() + ".atten.quadratic");
                }

                if (dirLight || pointLigths.size())
                    hasLights_ = true;
            }

            Graphics::this_->SetProgram(this);

            if (texture0Loc_ != -1)
            {
                glUniform1i(texture0Loc_, 0);
            }

            if (texture1Loc_ != -1)
            {
                glUniform1i(texture1Loc_, 1);
            }

            CHECK_GL_STATUS(__FILE__, __LINE__);
        }
    }

    void Program::ReleaseResources()
    {
        glDetachShader(id_, pVShader_->GetId());
        glDetachShader(id_, pFShader_->GetId());
        pVShader_ = nullptr;
        pFShader_ = nullptr;
        glDeleteProgram(id_);

        if (Graphics::this_->GetProgram() == this)
            Graphics::this_->SetProgram(nullptr);

        activeCamera_ = nullptr;
        neverUsed_ = true;
        activeMaterial_ = nullptr;
        activeNode_ = nullptr;
        activeScene_ = nullptr;
        sceneColor_ = Color(-1);
        material_ = MaterialProgram();
        memset(&activePointLights_[0], 0, sizeof(activePointLights_));
    }

    bool Program::Initialize()
    {
        CHECK_GL_STATUS(__FILE__, __LINE__);

        // Creates the program name/index.
        id_ = glCreateProgram();

        // Bind vertex attribute locations to ensure they are the same in all shaders
        glBindAttribLocation(id_, (int)AttributesLoc::POSITION, "a_position");
        glBindAttribLocation(id_, (int)AttributesLoc::NORMAL, "a_normal");
        glBindAttribLocation(id_, (int)AttributesLoc::TEXTURECOORD, "a_texcoord");
        glBindAttribLocation(id_, (int)AttributesLoc::COLOR, "a_color");
        glBindAttribLocation(id_, (int)AttributesLoc::MODEL_MATRIX_ROW0, "a_mMatrixRow0");
        glBindAttribLocation(id_, (int)AttributesLoc::MODEL_MATRIX_ROW1, "a_mMatrixRow1");
        glBindAttribLocation(id_, (int)AttributesLoc::MODEL_MATRIX_ROW2, "a_mMatrixRow2");
        glBindAttribLocation(id_, (int)AttributesLoc::NORMAL_MATRIX_COL0, "a_normalMatrixCol0");
        glBindAttribLocation(id_, (int)AttributesLoc::NORMAL_MATRIX_COL1, "a_normalMatrixCol1");
        glBindAttribLocation(id_, (int)AttributesLoc::NORMAL_MATRIX_COL2, "a_normalMatrixCol2");

        // Will attach the fragment and vertex shaders to the program object.
        glAttachShader(id_, pVShader_->GetId());
        glAttachShader(id_, pFShader_->GetId());

        // Will link the program into OpenGL core.
        glLinkProgram(id_);

        GLint link_status = GL_FALSE;

        glGetProgramiv(id_, GL_LINK_STATUS, &link_status);

        if (link_status != GL_TRUE)
        {
            GLint logLength = 0;

            // Instead use GL_INFO_LOG_LENGTH we could use COMPILE_STATUS.
            // I prefer to take the info log length, because it'll be 0 if the
            // shader was successful compiled. If we use COMPILE_STATUS
            // we will need to take info log length in case of a fail anyway.
            glGetProgramiv(id_, GL_INFO_LOG_LENGTH, &logLength);

            if (logLength > 0)
            {
                // Allocates the necessary memory to retrieve the message.
                GLchar* log = (GLchar*)malloc(logLength);

                // Get the info log message.
                glGetProgramInfoLog(id_, logLength, &logLength, log);

                TRACE_LOG("Error in Program Creation: " << log);

                // Frees the allocated memory.
                free(log);

                CHECK_ASSERT(false && "Error in program(shader) creation", __FILE__, __LINE__);
            }

            return false;
        }

        CHECK_GL_STATUS(__FILE__, __LINE__);

        return true;
    }

    Program::~Program()
    {
        Context::RemoveObject(this);
    }

    GLuint Program::GetAttributeLocation(const std::string& name)
    {
        return glGetAttribLocation(id_, name.c_str());
    }

    GLuint Program::GetUniformLocation(const std::string& name)
    {
        return glGetUniformLocation(id_, name.c_str());
    }

    void Program::SetSceneVariables(Scene* scene)
    {
        if (sceneColorAmbientLoc_ != -1)
        {
            if (scene)
            {
                if (activeScene_ != scene || scene->UniformsNeedUpdate())
                {
                    glUniform4fv(sceneColorAmbientLoc_, 1, &scene->GetAmbientColor()[0]);
                }
            }
            else if (activeScene_ != scene || sceneColor_ == Color(-1))
            {
                sceneColor_ = Color(0, 0, 0, 1);
                glUniform4fv(sceneColorAmbientLoc_, 1, &sceneColor_[0]);
            }

            activeScene_ = scene;
        }
    }

    void Program::SetNodeVariables(Node* node)
    {
        if (activeNode_ != node || (node && node->UniformsNeedUpdate()))
        {
            if (modelLoc_ != -1)
            {
                const Matrix4& m = node->GetGlobalModelMatrix();
                glUniformMatrix4fv(modelLoc_, 1, GL_FALSE, glm::value_ptr(m));
            }

            if (normalMatrixLoc_ != -1)
            {
                const Matrix3& m = node->GetGlobalModelInvTranspMatrix();
                glUniformMatrix3fv(normalMatrixLoc_, 1, GL_FALSE, glm::value_ptr(m));
            }
        }
    }

    void Program::SetMaterialVariables(Material* material)
    {
        if (material)
        {
            if (texture0Loc_ != -1)
            {
                Graphics::this_->SetTexture(0, material->pTexture0_.get());
            }

            if (texture1Loc_ != -1)
            {
                Graphics::this_->SetTexture(1, material->pTexture1_.get());
            }

            if (activeMaterial_ != material || material->UniformsNeedUpdate())
            {
                if (materialLoc_.color_ != -1 && material_.color_ != material->color_)
                {
                    material_.color_ = material->color_;
                    glUniform4fv(materialLoc_.color_, 1, &material->color_[0]);
                }

                if (materialLoc_.ambient_ != -1 && material_.ambient_ != material->ambient_)
                {
                    material_.ambient_ = material->ambient_;
                    glUniform4fv(materialLoc_.ambient_, 1, &material->ambient_[0]);
                }

                if (materialLoc_.diffuse_ != -1 && material_.diffuse_ != material->diffuse_)
                {
                    material_.diffuse_ = material->diffuse_;
                    glUniform4fv(materialLoc_.diffuse_, 1, &material->diffuse_[0]);
                }

                if (materialLoc_.specular_ != -1 && material_.specular_ != material->specular_)
                {
                    material_.specular_ = material->specular_;
                    glUniform4fv(materialLoc_.specular_, 1, &material->specular_[0]);
                }

                if (materialLoc_.shininess_ != -1 && material_.shininess_ != material->shininess_)
                {
                    material_.shininess_ = material->shininess_;
                    glUniform1f(materialLoc_.shininess_, material->shininess_);
                }
            }
        }

        activeMaterial_ = material;
    }

    void Program::SetCameraVariables()
    {
        Camera* camera = Camera::GetActiveCamera();

        bool update_camera = (viewLoc_ != -1 || viewProjectionLoc_ != -1 || eyeWorldPosLoc_ != -1);

        update_camera = update_camera && (activeCamera_ != camera || (camera && camera->UniformsNeedUpdate()));
        update_camera = update_camera || neverUsed_;

        if (update_camera)
        {
            neverUsed_ = false;

            if (viewProjectionLoc_ != -1)
            {
                const Matrix4& m = Camera::GetMatViewProj();
                glUniformMatrix4fv(viewProjectionLoc_, 1, GL_FALSE, glm::value_ptr(m));
            }

            if (viewLoc_ != -1)
            {
                const Matrix4& m = Camera::GetViewMatrix();
                glUniformMatrix4fv(viewLoc_, 1, GL_FALSE, glm::value_ptr(m));
            }

            if (eyeWorldPosLoc_ != -1)
            {
                Vertex3 position(0);
                if (camera)
                    position = camera->GetGlobalPosition();
                glUniform3fv(eyeWorldPosLoc_, 1, &position[0]);
            }
        }

        activeCamera_ = camera;
    }

    void Program::SetLightVariables(Scene* scene)
    {
        if (hasLights_ && scene)
        {
            const Light* dirLight = scene->GetFirstDirectionalLight();
            const Scene::Lights& pointLigths = scene->GetPointLights(MAX_POINT_LIGHTS);

            if (dirLight)
            {
                if (directionalLightLoc_.direction_ != -1)
                {
                    const Vertex3& direction = dirLight->GetLookAtDirection();
                    glUniform3fv(directionalLightLoc_.direction_, 1, &direction[0]);
                }

                if (directionalLightLoc_.base_.diffuse_ != -1)
                {
                    const Color& diffuse = dirLight->GetDiffuseColor();
                    glUniform4fv(directionalLightLoc_.base_.diffuse_, 1, &diffuse[0]);
                }

                if (directionalLightLoc_.base_.specular_ != -1)
                {
                    const Color& specular = dirLight->GetSpecularColor();
                    glUniform4fv(directionalLightLoc_.base_.specular_, 1, &specular[0]);
                }
            }

            if (nPointLights_ != pointLigths.size())
            {
                if (numPointLightsLoc_ != -1)
                {
                    glUniform1i(numPointLightsLoc_, pointLigths.size());
                }
                nPointLights_ = pointLigths.size();
            }

            int idx = 0;
            for (auto& pointLight : pointLigths)
            {
                if (activePointLights_[idx] != pointLight.get() || pointLight->UniformsNeedUpdate())
                {
                    if (pointLighsLoc_[idx].position_ != -1)
                    {
                        const Vertex3& position = pointLight->GetGlobalPosition();
                        glUniform3fv(pointLighsLoc_[idx].position_, 1, &position[0]);
                    }

                    if (pointLighsLoc_[idx].base_.diffuse_ != -1)
                    {
                        const Color& diffuse = pointLight->GetDiffuseColor();
                        glUniform4fv(pointLighsLoc_[idx].base_.diffuse_, 1, &diffuse[0]);
                    }

                    if (pointLighsLoc_[idx].base_.specular_ != -1)
                    {
                        const Color& specular = pointLight->GetSpecularColor();
                        glUniform4fv(pointLighsLoc_[idx].base_.specular_, 1, &specular[0]);
                    }

                    if (pointLighsLoc_[idx].atten_.constant_ != -1)
                    {
                        const Light::Attenuation& attenuation = pointLight->GetAttenuation();
                        glUniform1f(pointLighsLoc_[idx].atten_.constant_, attenuation.constant);
                    }

                    if (pointLighsLoc_[idx].atten_.linear_  != -1)
                    {
                        const Light::Attenuation& attenuation = pointLight->GetAttenuation();
                        glUniform1f(pointLighsLoc_[idx].atten_.linear_, attenuation.linear);
                    }

                    if (pointLighsLoc_[idx].atten_.quadratic_ != -1)
                    {
                        const Light::Attenuation& attenuation = pointLight->GetAttenuation();
                        glUniform1f(pointLighsLoc_[idx].atten_.quadratic_, attenuation.quadratic);
                    }

#if 0
                    if (type == Light::SPOT)
                    {
                        if (lightsLoc_[i].spotCutoff_loc != -1)
                        {
                            float cutOff = ligths[i]->GetSpotCutOff();
                            glUniform1f(lightsLoc_[i].spotCutoff_loc, cutOff);
                        }

                        if (lightsLoc_[i].spotExponent_loc != -1)
                        {
                            float exponent = light->GetSpotExponent();
                            glUniform1f(lightsLoc_[i].spotExponent_loc, exponent);
                        }

                        if (lightsLoc_[i].spotDirection_loc != -1)
                        {
                            const Vertex3& direction = light->GetLookAtDirection();
                            glUniform3fv(lightsLoc_[i].spotDirection_loc, 1, &direction[0]);
                        }
                    }
#endif
                }

                activePointLights_[idx++] = pointLight.get();
            }
        }
    }

    void Program::SetVariables(Material* material, Node* node)
    {
        Scene* scene = Context::this_->scene_;

        SetSceneVariables(scene);
        SetMaterialVariables(material);
        SetNodeVariables(node);
        SetCameraVariables();
        activeNode_ = node;
        SetLightVariables(scene);
        if (pExtraUniforms_)
            pExtraUniforms_->AssignValues();
    }

    void Program::SetVariables(Material* material)
    {
        Scene* scene = Context::this_->scene_;
        SetSceneVariables(scene);
        SetMaterialVariables(material);
        SetCameraVariables();
        SetLightVariables(scene);
        if (pExtraUniforms_)
            pExtraUniforms_->AssignValues();
    }

    void Program::Save(pugi::xml_node& node)
    {
        pugi::xml_node child = node.append_child("Program");

        {
            std::stringstream ss;
            ss << name_;
            child.append_attribute("name") = ss.str().c_str();
        }

        child.append_attribute("flags") = flags_.to_string().c_str();

    }

    PProgram Program::CreateFrom(const pugi::xml_node& node)
    {
        std::string name = node.attribute("name").as_string();
        std::string flags = node.attribute("flags").as_string();
        PProgram program(new Program(name, flags));
        return program;
    }
}
